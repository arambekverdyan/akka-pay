package zork;

import static org.junit.Assert.assertEquals;

import java.util.Optional;

import org.junit.AfterClass;
import org.junit.BeforeClass;
/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import org.junit.Test;

import akka.actor.ActorRef;
import akka.actor.ActorSystem;
import akka.testkit.javadsl.TestKit;
import zork.enviromnment.Device;
import zork.enviromnment.messages.DeviceFunctionality;
import zork.enviromnment.messages.DeviceLifecycle;

public class DeviceTest {
  static ActorSystem system;

  @BeforeClass
  public static void setup() {
    system = ActorSystem.create();
  }

  @AfterClass
  public static void teardown() {
    TestKit.shutdownActorSystem(system);
    system = null;
  }

  @Test
  public void testReplyToRegistrationRequests() {
    TestKit probe = new TestKit(system);
    ActorRef deviceActor = system.actorOf(Device.props("groupId", "deviceId"));

    deviceActor.tell(new DeviceLifecycle.RequestTrackDevice("groupId", "deviceId"), probe.getRef());
    probe.expectMsgClass(DeviceLifecycle.DeviceRegistered.class);
    assertEquals(deviceActor, probe.getLastSender());
  }

  @Test
  public void testIgnoreWrongRegistrationRequests() {
    TestKit probe = new TestKit(system);
    ActorRef deviceActor = system.actorOf(Device.props("group", "device"));

    deviceActor.tell(new DeviceLifecycle.RequestTrackDevice("some wrong group", "some wrong device"), probe.getRef());
    probe.expectNoMessage();

    deviceActor.tell(new DeviceLifecycle.RequestTrackDevice("group", "some wrong device"), probe.getRef());
    probe.expectNoMessage();
  }

  @Test
  public void testReplyWithLatestTemperatureReading() {
    TestKit probe = new TestKit(system);
    ActorRef deviceActor = system.actorOf(Device.props("groupId", "deviceId"));

    deviceActor.tell(new DeviceFunctionality.RecordTemperature(1L, 24.0), probe.getRef());
    assertEquals(1L, probe.expectMsgClass(DeviceFunctionality.TemperatureRecorded.class).requestId);

    deviceActor.tell(new DeviceFunctionality.ReadTemperature(2L), probe.getRef());
    DeviceFunctionality.RespondTemperature response1 = probe.expectMsgClass(DeviceFunctionality.RespondTemperature.class);
    assertEquals(2L, response1.requestId);
    assertEquals(Optional.of(24.0), response1.value);

    deviceActor.tell(new DeviceFunctionality.ReadTemperature(4L), probe.getRef());
    DeviceFunctionality.RespondTemperature response2 = probe.expectMsgClass(DeviceFunctionality.RespondTemperature.class);
    assertEquals(4L, response2.requestId);
    assertEquals(Optional.of(55.0), response2.value);
  }

  @Test
  public void testReplyWithEmptyReadingIfNoTemperatureIsKnown() {
    TestKit probe = new TestKit(system);
    ActorRef deviceActor = system.actorOf(Device.props("group", "device"));
    deviceActor.tell(new DeviceFunctionality.ReadTemperature(42L), probe.getRef());
    DeviceFunctionality.RespondTemperature respond = probe.expectMsgClass(DeviceFunctionality.RespondTemperature.class);
    assertEquals(42L, respond.requestId);
    assertEquals(Optional.empty(), respond.value);
  }
}
